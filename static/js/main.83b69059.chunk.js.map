{"version":3,"sources":["components/editableText.js","components/stopwatch.js","App.js","serviceWorker.js","index.js"],"names":["EditableText","childRef","text","children","placeholder","useState","isEditing","setEditing","useEffect","current","focus","select","onBlur","onKeyDown","e","event","key","indexOf","handleKeyDown","style","display","justifyContent","onClick","Stopwatch","props","isRunning","setRunning","start","setStart","seconds","setSeconds","hold","setHold","number","title","setTitle","inputRef","useRef","interval","setInterval","Date","now","clearInterval","className","ref","type","name","value","autoComplete","onChange","target","Math","floor","slice","Button","variant","color","size","App","timers","setTimers","map","idx","length","filter","x","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.83b69059.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\n\nconst EditableText = ({\n  childRef,\n  text,\n  children,\n  placeholder\n}) => {\n\n  const [isEditing, setEditing] = useState(false)\n\n  useEffect(() => {\n    if (childRef && childRef.current && isEditing === true) {\n      childRef.current.focus()\n      childRef.current.select()\n    }\n  }, [isEditing, childRef])\n\n  const handleKeyDown = (event) => {\n    const { key } = event\n    const keys = [\"Escape\", \"Tab\", \"Enter\"]\n    if (keys.indexOf(key) > -1) {\n      setEditing(false)\n    }\n  }\n\n  return (\n    <div>\n      {\n        isEditing \n        \n        ? (\n          <div\n            onBlur={() => setEditing(false)}\n            onKeyDown={e => handleKeyDown(e)}\n            style={{display: \"flex\", justifyContent: \"center\"}}\n          >\n            {children}\n          </div>\n        ) \n        \n        : (\n          <div onClick={() => setEditing(true)}>\n            <span>\n              {text || placeholder || \"Click to edit\"}\n            </span>\n          </div>\n        )\n      }\n    </div>\n  )\n}\n\nexport default EditableText","import React, { useState, useEffect, useRef } from \"react\"\nimport EditableText from './editableText'\nimport { Button } from '@material-ui/core'\n\n\nfunction Stopwatch(props) {\n  \n  const [isRunning, setRunning] = useState(false)\n  const [start, setStart] = useState(0)\n  const [seconds, setSeconds] = useState(0)\n  const [hold, setHold] = useState(0)\n  const [title, setTitle] = useState(`Timer #${props.number}`)\n  const inputRef = useRef()\n\n  const toggle = () => {\n    if(isRunning) {\n      setHold(seconds)\n      setRunning(false)\n    } else {\n      setStart(Date.now())\n      setRunning(true)\n    }\n  }\n\n  const reset = () => {\n    setStart(0)\n    setSeconds(0)\n    setHold(0)\n    setRunning(false)\n  }\n\n  useEffect(() => {\n    let interval = null\n    if (isRunning) {\n      interval = setInterval(() => {\n        setSeconds(\n          ((Date.now() - start) / 1000) + hold\n        )\n      }, 1000)\n    } else if (!isRunning && seconds !== 0) {\n      clearInterval(interval)\n    }\n    return () => clearInterval(interval)\n  }, [isRunning, seconds, start, hold])\n\n  const mainButtonText = () => {\n    if(isRunning) {\n      return \"Stop\"\n    } else if(seconds === 0) {\n      return \"Start\"\n    } else {\n      return \"Resume\"\n    }\n  }\n  \n  return (\n    <div className=\"timer-container\">\n      <div className=\"timer-title-container\">\n        <EditableText\n          childRef={inputRef}\n          text={title}\n          placeholder={title}\n        >\n          <input\n            ref={inputRef}\n            type=\"text\"\n            name={props.number}\n            value={title}\n            autoComplete=\"off\"\n            onChange={e => setTitle(e.target.value)}\n          />\n        </EditableText>\n      </div>\n      <div className=\"timer-time-container\">\n        <span className=\"timer-time\">\n          {\n            (\"0\" + Math.floor(seconds / 3600)).slice(-2) + \":\" +\n            (\"0\" + (Math.floor(seconds / 60) % 60)).slice(-2) + \":\" +\n            (\"0\" + Math.floor(seconds % 60)).slice(-2)\n          }\n        </span>\n      </div>\n      <div className=\"timer-controls-container\">\n        <div className=\"timer-controls-main-btn\">\n          <Button onClick={toggle} variant=\"contained\" color=\"primary\" size=\"large\">\n            {mainButtonText()}\n          </Button>\n        </div>\n        <div>\n          <Button onClick={reset} color=\"secondary\">\n            Reset\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Stopwatch","import React, { useState } from 'react'\nimport './App.css'\nimport Stopwatch from './components/stopwatch'\nimport { Button } from '@material-ui/core'\n\n\nfunction App() {\n\n  const [timers, setTimers] = useState([1])\n\n  const addTimer = () => {\n    setTimers([...timers, timers.length + 1])\n  }\n\n  const removeTimer = () => {\n    setTimers(timers.filter(x => x !== timers.length))\n  }\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"gutter\"></div>\n      <div className=\"main\">\n        <div className=\"timers\">\n          {\n            timers.map((key, idx) => (\n              <Stopwatch key={idx} number={key} />\n            ))\n          }\n        </div>\n        <div className=\"controls\">\n          <div className=\"add-timer-btn\">\n            <Button onClick={addTimer} variant=\"contained\" color=\"primary\" size=\"large\">\n              add timer\n            </Button>\n          </div>\n          {\n            timers.length > 1 &&\n            <Button onClick={removeTimer} color=\"secondary\">\n              remove last timer\n            </Button>\n          }\n        </div>\n      </div>\n      <div className=\"gutter\"></div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}